Desktop Server to Pantheon Guide
Pantheon is a world class Website Management Platform for both WordPress and Drupal.  It leverages container based architecture to deliver elastic hosting and professional workflows through automatically provisioned Development, Testing and Live environments for every site.  Built by professional web developers specifically for professional developers who have a portfolio of sites that needs a standard set of workflows and tools out of the box and awesome flexibility.  Their customers span the gamut from tiny blogs to monster media sites like Patch.com and The Boston Herald and many leading universities like ASU and UC Berkeley.  

Pantheon is not your average hosting provider and there are some things to understand if you want to move onto their service.  Before we dig into specifics, you will want to take a moment to look over the architecture of this platform to get a clearer idea of how it is built: https://pantheon.io/features/elastic-hosting

3 Environments on every site and workflow: Pantheon was built to be your complete Build, Launch and Run solution, meaning you can do direct on server development.  There are advantages to local dev as all DesktopServer will attest, but Pantheon does not require it. On Pantheon, the guiding principle is that Code only should only ever move from the Dev environment towards Live and Content should canonically live in Live and only ever get cloned back to the other environments.  In between these ends you need an environment to merge the code changes with the live content, but not interfere with the Dev or Live environments.  That is your Test environment. Please read this doc before you attempt to push your site into Pantheon: https://pantheon.io/docs/pantheon-workflow/

wp-content/uploads and writable files:   Pantheon approaches Code, Files and DB as three separate things.  This means your Upload folder inside your code base is not where you are going to upload your files.  Instead you are going to use Pantheon's handy File Archive Utility to toss them up.  Here is doc that expains how this works: https://pantheon.io/docs/files/

DB: Pantheon uses a grid implementation of MariaDB and the credentials are going to be set by the environments itself.  This means that you can’t hard code the pre-sets for your DB config, but it frees you from ever having to manually do it again.  Before your site will function on Pantheon you should swap out the wp-config.php file for the standard issued one Pantheon uses for its upstreams from our github: https://raw.githubusercontent.com/pantheon-systems/WordPress/master/wp-config.php

Caching: Part of Pantheon’s platform as a service approach automatically delivers Varnish for lightning fast reverse proxy caching across all sites on the platform.  Nothing to tune or configure, it is simply there as part of their Edge layer that also handles routing and LB automatically.  You can read more about this here: https://pantheon.io/features/advanced-caching

.htaccess and Apache settings:   Pantheon uses NginX as their server to execute your code inside containers, not Apache.  If you have modified .htaccess for your site, you will need to reconsider those changes and/or refactor to use the wp-config.php file.  This is documented here: https://pantheon.io/docs/htaccess/

URL Updating: Not unique to Pantheon is the issue that Absolute URLS will absolutely break when you change environments.  When you first load your code into Pantheon you will need a way to replace the URL paths in the DB.  I recommend using WP-CLI ‘search-replace’ (works both with DesktopServer-via DS-CLI, and on Pantheon-via Terminus)  Doc: https://pantheon.io/docs/wp-cli/.   Once on Pantheon though this service can be performed by the platform when using the tooling to push content between environments.  
No Multisite allowed on Pantheon unless you specifically get Pantheon involved and sign a contract for this type of service.  You can find more info here: https://pantheon.io/docs/wordpress-site-networks/

Known problematic plugins (every host has them): https://pantheon.io/docs/unsupported-modules-plugins/#wordpress-plugins

OK, that is a lot to consider.  So why would you still want to do this on Pantheon.  The answers are pretty clear once you have the site on the system.  Speed, reliability and scaling ability are the main reasons.  For the site builder it allows teams of any size collaborate in more meaningful ways and with faster iteration cycles, with far less infrastructure set up than would be needed if configuring the same type of workflow manually.   
So, ready?  
Here is what you need to do:
Log in to your Pantheon account.
From the User Dashboard (default destination after login) click the New SIte button.  (NOTE: The “Migrate Existing Site” specifically is for sites already hosted on other publically reachable servers, like WPEngine, BlueHost or others)
Name your site on Pantheon.  You and your team are the only people who will see this so it should be meaningful but does not need to reflect the final URL you are going to launch it under.  Notice: Once you hit ‘Continue’ there is no way to change the name you chose.  The site name is linked to the Unique URL ID number for your site moving ahead.  
Install a fresh WP install from the ‘Choose your site type’ list.  Upon hitting “Deploy WordPress” the machines go to work setting up the container environments, allocating file system and DB for each, pulling the WP code and putting it in the Git repository for the Dev environment and many other things.  This site creation process takes 2 to 5 minutes on average.  Go get some coffee or check email for a minute.  :)  Once finished, hit the “visit site dashboard” (a direct link to ~/wp-admin) to complete the process.  If you are brand new to Pantheon, stop and familiarize with this dashboard via this link: https://pantheon.io/docs/sites/

Prep your site to leave DesktopServer.  If you are using DesktopServer Pro, simply export your site.  Since we are going to be completely replacing wp-config.php contents you can skip the second screen asking for DB and host details.  If you are still using the free version, you can get your DB from exporting from the phpadmin interface.  
RECOMMENDATION: Copy & paste the archive into a new directory.  For these next sub tasks.  
Now we need to move the contents of the wp-uploads folder and zip it up.  Does not matter where it is stored, just outside of the main code directory and someplace you can quickly find it later.  Same with the DB.  Here is how I do mine: 
NOTE: I am not zipping the ‘uploads’ folder itself, instead all the content and files from within that folder.  This is why Uploads has no content but is still in the code path as expected.  In the higher directory you can see the 2016, 2015 and private folder.  That is what I zipped into the archive. 

Here you have a choice to make, you are either going to interact with your code 1 of 2 ways for this next sets of steps.  Git mode or SFTP mode (which is backed by Git).  If you have not worked with Git before, it is the fastest way to interact with the code and push around changes. SFTP is simpler using your favorite client, like CyberDuck, Transmit or anything else supporting SFTP connections.   I will Outline both methodologies.
Git method.   (NOTE: I am a novice, so there is likely a much better path, I will leave it to ACE team to improve this process)  
From your Pantheon dashboard choose Git mode from the Code section.  This will auto-generate the command needed to clone down your Pantheon Development Environment code base to our local directory of choice: 
Now replace everything under wp-content/plugins with the contents of this new folder with the contents of your site archive directory (copy paste or move).  
Swap out the contents of the wp-config file with the following: https://raw.githubusercontent.com/pantheon-systems/WordPress/master/wp-config.php and hit save.  
Then simply 
git add . 
git commit -m “commit message about replacing code”
git push origin master
Congrats this will push the code onto Pantheon in a couple minutes.  You can see the status via the Status icon on the Pantheon dashboard.  
Use the “Database / Files” files tab and select the Import from the drop down.  Now just select the DB and the file archive and hit Import.  
That is it, ready to move onto path search and replace!  

SFTP method (note this is slower but man it is simple)
From your Pantheon dashboard choose SFTP mode from the Code section.  This will auto-generate the SFTP credentials needed to plug into your client.  You can even have it attempt to auto populate this in your default client.   Here is what my set up with Cyberduck looks like:



All the Code for the site is stored under the /Code directory.  (Note: you will see a long hash in front, that is expected and a result of the container based infrastructure.  This will also change sometimes based on various platform events, which is completely normal and without impact to your utilization or access.) 
In your local archive, swap out the contents of the wp-config file with the following: https://raw.githubusercontent.com/pantheon-systems/WordPress/master/wp-config.php and hit save.  

Replace everything under wp-content/plugins and wp-config. (Note: this can take a while, as SFTP wire speeds can vary greatly and the file management overhead adds significant weight to the process)
Use the “Database / Files” files tab and select the Import from the drop down.  Now just select the DB and the file archive and hit Import.  
That is it, ready to move onto path search and replace!  
	7) REACTIVIATE YOUR PLUGINS! (if necessary) You can do this via normal wp-admin or wp-cli “wp plugin activate”.
8) Now we need to update the absolute file paths in the DB.  There are multiple approaches to this but the fastest one I found was utilizing WP-CLI ‘search-replace’ functionality so that is the one I am documenting.  You can execute this through Pantheon’s CLI Terminus, which you will need to install first with the directions here: https://pantheon.io/docs/terminus/.  Then execute the following command: terminus wp "search-replace old URLpath newURLpath --dry-run" --site=targetpantheonsitename --env=dev 
This will show you a preview of what it will be replacing.  Make sure it looks good then rerun without the --dry-run to actually save changes.  
(example: terminus wp "search-replace localsite.com dev-migrationfromdesktopserverexample" --site=migrationfromdesktopserverexample --env=dev) 
Optionally you can do this via the DS-CLI with the same process, but must be done before uploading the DB and will break the site locally. Use your best judgement.  
9) OPTIONAL, but a generally good idea whenever moving a WP site install 'Broken Link Checker' and run it.  Here is the Pantheon doc on this: https://pantheon.io/docs/wordpress-broken-links
Your website should now be ready. Visit your site to check the links and verify that it is functional. Here are a few steps to check if your site fails to display properly:
-------------------------------


Once on Pantheon, again, the git repository on Dev will be assumed Master, so to do future local development you will need to do clone the repository down again as well as the files and DB, reconfiguring for the local environment with the following steps:

A) Duplicator (the preferred path for DS)

1) wp-admin plugin add, make an archive (normal path)
2) Export to local
3) Follow this process: https://serverpress.com/using-duplicator-to-import-a-live-website/
4) the 'scrubbing' step of import will break the DB credentials in wp-config.php file by injecting  <code>]);'</code> into the DB credentials. It also rips out a bunch of stuff from headers as well.  simply open wp-config.php and remove that inserted code.  Should work upon save.

B) Manual (if for some reason you can't install a plugin)

1) Take a backup of the Dev site
2) download Code, DB and File archives
3) unpack all
4) rename files folder to 'uploads' and place in code under wp-content folder
5) Move DB file into the code folder
6) recompress as single archive
7) import via this process: https://serverpress.com/getting-started-with-import-and-export/
8) the 'scrubbing' step of import will break the DB credentials in wp-config.php file by injecting  <code>]);'</code> into the DB credentials. It also rips out a bunch of stuff from headers as well.  simply open wp-config.php and remove that inserted code.  Should work upon save.



------------------------------------------
****NOTES******ORIGINAL PASS**************
DeskTop Server processes

From Pantheon to DesktopServer

A) Duplicator (the preferred path for DS)

1) wp-admin plugin add, make an archive (normal path)
2) Export to local
3) Follow this process: https://serverpress.com/using-duplicator-to-import-a-live-website/
4) the 'scrubbing' step of import will break the DB credentials in wp-config.php file by injecting  <code>]);'</code> into the DB credentials. It also rips out a bunch of stuff from headers as well.  simply open wp-config.php and remove that inserted code.  Should work upon save.

-----
B) Manual (can't install a plugin)

1) Take a backup of the Dev site
2) download Code, DB and File archives
3) unpack all
4) rename files folder to 'uploads' and place in code under wp-content folder
5) Move DB file into the code folder
6) recompress as single archive
7) import via this process: https://serverpress.com/getting-started-with-import-and-export/
8) the 'scrubbing' step of import will break the DB credentials in wp-config.php file by injecting  <code>]);'</code> into the DB credentials. It also rips out a bunch of stuff from headers as well.  simply open wp-config.php and remove that inserted code.  Should work upon save.

NOTE/ODDITY: Only for the scalewP.io in tests Andrew Taylor's pantheon-wpms-github-sync plugin has a bunch of undefined things when run on local, removing this plugin seems to fix it.   

=====

From DesktopServer to Pantheon:

A) Manual method:   
SFTP mode (cause if you using Desktop server do you even know what Git is????)

1)Export the fucking website from DesktopServer (this part works at least): https://serverpress.com/getting-started-with-import-and-export/

2)Open the zip and move the DB and /uploads somewhere else

3)Follow normal manual migration steps on Pantheon 

4) now go in and replace wp-config.php with this: https://raw.githubusercontent.com/pantheon-systems/WordPress/master/wp-config.php 
-reinsert anything that was custom I suppose.  

5) terminus wp "search-replace old URLpath newURLpath" --site=mcdwaynedesktopserverimportattemp1 --env=dev
(EXAMPLE: terminus wp "search-replace dev-mcdwaynedotcom dev-migrationfromdesktopserverexample5" --site=migrationfromdesktopserverexample5 --env=dev
)
Easiest way I found on all attempts was to load up site and look for missing pic, inspect element and get path from browser.  

6) install 'Broken Link Checker' and run that sommabitch
(just in case):
https://pantheon.io/docs/wordpress-broken-links

-------

B) Using Duplicator/Blogvault/anything that can make an archive:
Tried this path with Duplicator many, many times, did not work and I am not sure why.




ds-deploy 'protocol://user:pass@sample.com[:port]/[directory]'

