WordCamp Baltimore: All about that B2B - Bay Area to the B'more

I love Baltimore.  Every time I have visited I find a new reason to like it even more.  It was here that I first gave my [improv talk](https:://www.mcdwayne.com/improv-for-developers/)

General:

https://twitter.com/AmDeeLLC/status/919188845199089664

https://twitter.com/cass_ingles/status/919180943767810048

https://twitter.com/AmDeeLLC/status/919177416936972294

https://twitter.com/wordcampbalt/status/919206006378369024



Speaker Dinner
Can't find a pic and I forgot to take one, but in same place as last year, so here is a tweet from then

https://twitter.com/wpvideoeditor/status/799754569307668480

Day 1
Opening remarks

https://twitter.com/McDwayne/status/919187807704440832

https://twitter.com/shelleymagnezi/status/919187249136394245



Lunch:


After Party (Networking event)
The food ws amazing, tremendous vegan options, though no donuts for me...

https://twitter.com/wordcampbalt/status/919320167389257728

Dinner
[Of Love and Regret](ofloveandregret.com)

https://twitter.com/McDwayne/status/919368483439349761


Karaoke!
My top Karaoke bars are:
1 - Bow Bow Lounge (Cinatown in San Francisco)
2 - Otter's Saloon (Minneapolis, MN) 
3 - Walt's Inn (Baltimore, MD)


https://twitter.com/WesLinda/status/919400786853072898


Day 2


###Sessions

[The Future: Why Open Matters](https://2017.baltimore.wordcamp.org/schedule/)
[Aaron Campbell](https://twitter.com/aaroncampbell)

History teachers 
not a fan of history
but important for this talk to go back in time
1994 super important year
changed all our lives 
how we shared informations
but before that 1990
SNES changed Aaron's life
such a giant leap from qbasic gorillas
but that game and DOS taught him to code/modify the source code
before internet, books from bookstore
open code he did not write, just modify
standing on the shoulders of giants, from 1100's is that saying
Newton 1675 paraphrased
sharing information has evolved
technology has improved knowledge base you can access
books were a huge jump
stores of information
then computers
then internet - single most effective information sharing tool in history
closed systems are not necessarily bad, just potential hazard
risks are OK sometimes, but looking from history
sharing is what advances us
now we are risking private hands of big advances and not share
divorcing net neutrality
trying to treat all data the same
should be easier than it is
handling all data the same weight is a lot easier
but morally and ethically this is not so easy
not illegal stuff, just bad info
"If I was in control I would wipe out this bad info from the internet"
small groups that hold minority opinion are sometimes right
majority rule and suppressing voices and info
then who decides what is true?
Internet is where people go to learn things
historically, putting that in the hands of a limited set of people has issues
only way to overcome those mistakes is to distribute all into to all people
then people can decide
must allow things we don't care for, it is possible we are wrong
love that people can prove him wrong
most be allowed to have progress
What happens to the internet in the future
can we make info free to create a next isaac newton?
Steps we need to take make sure it stays around
1) use open alternatives.  Don't give single companies closed monopolies.
2) Spread the word about this idea.  Inform and inspire people to keep it open and accessible
3) Vote and make your voice heard, but please be informed
4) Vote with your money, support businesses that support the open web!


https://twitter.com/wordcampbalt/status/919190564670726144


[Write Better Javascript](https://2017.baltimore.wordcamp.org/session/write-better-javascript/)
[Ethan Butler](https://twitter.com/ethanfbutler)

Javascript is the future
(I came in late I assume he said that)
Browserify
"Writing webpack direct is like inviting demon into your home"
recapping modularity
write doce i 
you need a bundler
JS makes it hard to express your ideas
transpiliation to the rescue?
Future specs!  
Languages move faster than browser tech
real language features
babel is the go to, really only game in town for transpilers
(I got distracted and missed more)
Object notation
He deconstructed an object for us
Object destructuring is a newer thing
Object assign - data method on the object primative to merge objects
Promises are if you expect a return at a future unspecified time
resolve or reject
used is Ajax a lot
async/await is a more powerful alternative
we can use transpiliers to leverage new features without worry about browser
final problem for today
hard to debug
Functional programming
avoids mutable data
program is just an evaluation of user input
same input gets the same output, every time
Bugs happen because of side effects
pure functions a + b + c example
Data - arrays of objects for the most part
array.map - iterate over the values and transform it
array.sort (not a new thing) compare values pos, neg or 0, to sort posts for instance
array.includes - see if includes a string, so a search, can use for strings or anything really
array.some - true if callback is partial match of term
array.every - true if every value matches term
array.reduce - flatten values to a single value, 


https://twitter.com/nehagupt/status/919208911412056064

https://twitter.com/McDwayne/status/919204341646536704


[Making Your Code Easy To Extend](https://2017.baltimore.wordcamp.org/session/making-your-code-easy-to-extend/)
[Sal Ferrarello](https://twitter.com/salcode)

(missed firt 10 minutes)
MU Plugins -best kept secret in WP
Best place to put code as pugins and not worry about client deleting them
the code expects it
Add actions - do_action - await for a thing to happen
not returning a value
takes control and then give chance to do own thing
he likes bootstrap to acheive effects
wrote a email stop plugin stop-emails 
used do_action
takes focus and says log email to a file
using __DIR__ . 
solves a problem for a plugin request without actually modifying the plugin     
by exposing that do_action and tiny bit of code
template
esc_html( $btn_text ) .
fe-raptor-button.php
using include
templates/btn.php

https://twitter.com/wordcampbalt/status/919219574435917824

https://twitter.com/EliW/status/919219620866875393

[SASS isnâ€™t Scary](https://2017.baltimore.wordcamp.org/session/sass-isnt-scary/)
[Beth Soderberg](https://twitter.com/bethsoderberg)

Beginner, welcome, you do need to know a little CSS
Selectors
properties
values
that is it for CSS
A preprocessor is a anguage that compiles to another language
all kinda the same, syntax is a little different but converging on a set standard of ideas
Preprocessors bring programatic methodology to CSS
DRY: don't Reprat Yourself
Reusable libraries - pulling from a standard set of code
ability to define abstract values, let the computer built to do the math
CSSS preprocessors are NOT CSS
CSS don't have to follow the rules of the CSS specification rules
Benefits
Modularity - don't get lost by stuffing everything in one file
programmability + automation + modularity = scalability
Potential challenges
Fear of change
old way fels inefficient even for small projects
Set Up is sometimes hard, uses Ruby and is unfamiliar to most
Issues are normal, you are not alone
Debugging is harder with SASS since there are so many partials
"Why is this not telling me where this is coming from?" - Beth's least favorite part about SASS
Bloat - easy to write crappy code in SASS just like CSS, just way more code created
Still want the thing you are compiling to to be as small as possible, avoid bloat
Maintainability - can be an issue for legacy especially - inherited sites are much harder
once compiled to one file can at least make it approachable though
Why SASS over LESS?
	Work team preference
	Overall in the WP community - lot of resources and blogs about this and WP
	Accessibility written books/resources
Less is still a thing though - 
Syntactically Awesome Stylesheets
Sass is a extention of CSS
Really helps you use Compass
Sass has 2 extentions
.sass and .scss
Basics:
Learn SASS slowly but also learn CSS first
Nesting
Benefits
	avoids duplicating selectors
	reflects markup structure
	uses indentation to indicate heirarchy
	should eb limited to 4-5 levels
	less typing
Nesting Properties with Shared Namespaces
in simple examples not that impressive, but in production real world saves a lot of time and effort
can reference the parent selector
Variables
invoking varaibles
good uses
	colors
	font stacks
	image paths
	margin
	widths
	font sizes
Mixins
Allows defining a group of styles once for use throughout a style sheet
should be used for common patterns independent of HTML markup
80% of mixins have less than 5 declarations
Mixin Libraries
write your most common mixins once and reuse accross projects
write your own
Compass
Bourbon
Sass CSS3 Mixins
Breakpoint and more!
Operators - letting the machine do the math
Partials
and underscore-prefixed Sass file is prtial
Don't generate CSS files directly


https://twitter.com/WordPressDC/status/919270193087614979

https://twitter.com/McDwayne/status/919270238109224960

https://twitter.com/aaroncampbell/status/919276084973236227

https://twitter.com/shelleymagnezi/status/919369422044913666


[Conquering Continuous Integration and Deployment](https://2017.baltimore.wordcamp.org/session/conquering-continuous-integration-and-deployment/)
[Tessa Kriesel](https://twitter.com/tessak22)

First let's look at what daily things we routinely do
She lays out a list of daily dos
Automating tings in your life
Invest the time in automation
can be hard to fit it in
walks through automating updates
look at slack to show off visual regression tests
explains Backstop
pics comparing 2 versions of a site
build steps
setup containers
install dependencies
running automated testing
behat (behavioral testing)
containers are awesome	
Github is where all the code lives


https://twitter.com/McDwayne/status/919566222479552518


[Sketches: The Universal Language](https://2017.baltimore.wordcamp.org/session/sketches-the-universal-language/)
[Joshua Wold](https://twitter.com/JoshuaWold)

How should a portal be set up
how to communicate with the client on what they want
and how the designers are thinking about it
He did a sketch to try to understand what the client was trying to say
the whole conversation changed for the better
cleared up confusion
Once the client saw the issue more clearly, was able to move forward much better
a quick sketch in 10 minutes changed everything
the tech doesn't really matter, he used an ipad
most people are visual thinkers
hard to put into words what a website looks like, easier to sketch
they are building a house
miscommunicated on paper, once saw in person, visually saw what was issue
if you have a pen and a napkin you can sketch
simple lines and shapes and arrows are all you really need
just draw something and share it
does not have to be pretty just to get idea across
Gutenberg example (see his handout)
Ticket management...hard to recall what ticket messages mean
if you can sketch wire frames an attach to ticket
gets anyone no matter what their native language is to get on same page in seconds
stay in the ugly lines as long as you can, 
once you move beyond that it can takes hours to make any changes
He has been able to contribute to core by adding sketches to help everyone communicate
simle really is better, just standardize a few simpe elements like clickable buttons
Sketching: paper and pen really is the best way to go for initial phase
next best is ipad pro, + Paper 53, then Balsamiq for squiggly lines (tells people you are not done.
Prototyping: Adobe XD, Illustrator, INvision
Sharing CloudUp, Quicktime, Tapes for Mac
It is more important to get on same page with clients than to dwell on tech or pretty sketches



https://twitter.com/McDwayne/status/919580379618709505


My session
	
[Everything louder than everything else! Navigating stakeholder needs through better discovery](https://www.mcdwayne.com/everything-louder-than-everything-else/)

https://twitter.com/shelleymagnezi/status/919617043342741504


Closing and cleanup

https://twitter.com/wordcampbalt/status/919643647402037253
