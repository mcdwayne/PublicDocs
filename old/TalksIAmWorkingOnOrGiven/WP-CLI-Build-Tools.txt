Shipping Content With WP-CLI and Automated Testing And Why That Is Awesome

We live in a world of continuous integration, continuous delivery, version controlled code and configuration. Yet when it comes to delivering content we are relying on doing all publishing straight to the production environment and hoping it works, editing the live document to fix issues we only find once they are in production.  I propose there is a better way.

Let's build our content on our development instances the same way we develop code and configuration.  Then using the power of Github, WP-CLI and Automated Testing tools like Behat, let's professionally deploy our content to production will full confidence it works as intended.  Let's give editors better tools to build better content in a word of Gutenberg while saving anyone the need to overwrite the production database ever again.  

Topics include:
WP-CLI for generating content
Connecting Github and your WordPress site
Leveraging multiple environment
Behaviorally testing content

----------------

COdeseption - Check it out, pat Ramsey


Nested blocks are, in essence, configuration dependent code snippets embedded inside other configuration dependent code snippets in a big old blob. 
For 90%+ of users who will just post it to live, this is not going to be too much of an issue, since all dev is live dev. But for anyone with a content deployment pipeline that requires staging, we better freaking make sure that we are testing content the same way we testing code if we are accepting as a community that configuration in any way shape or form is not completely separated from the content itself. Think the Chicago Sun Times, Newsweek, and other enterprises that pay $Millions for web infrastructure and use WP.

-----

Write your content and automatically test and deploy it to production via the technical magic of WP-CLI, scripting and Behat.

--------
WP-CLI-Build-Tools

Building websites by script
Why a build system
what's in it for me?
when build tools 




curl https://raw.githubusercontent.com/mcdwayne/PublicDocs/master/NotesITookAtCampsAndBlogDrafts/StanfordDrupalCamp2018-blog-draft.txt | sed -n '1!p' | terminus wp mcdwaynedotcom.gutes -- post create --post_author=1 --post_title='Stanford DrupalCamp: The first time I have ever seen it rain in Palo Alto and a shorter camp than usual' --post_name='StandfordDrupalCamp2018' --count=1 --post_status=publish -


curl https://raw.githubusercontent.com/mcdwayne/PublicDocs/master/NotesITookAtCampsAndBlogDrafts/StanfordDrupalCamp2018-blog-draft.txt | sed -n '1!p' | terminus wp mcdwaynedotcom.live -- post update 573 -


terminus wp mcdwaynedotcom.live -- post update 573 --tags_input='Drupal, Stanford, DrupalCamp, WP-CLI'


Test broken links
URL changes work





1. Publish content on WP page on dev-sitename.pantheonsite.com

2. ping CircleCI to fire off automation script
https://wordpress.stackexchange.com/…/rest-alert-when-new-w…

3. Export post to Github
? https://wordpress.org/plugins/wp-github-sync/

4. republish to test-sitename.pantheonsite.com

assuming I can store text files as I do now, with the title as first line, it would be:
curl, 
parse first line into variable
chop off the top ( sed -n '1!p' )
terminus wp-cli generate from - (STDIN)

working manual push:
curl https://raw.githubusercontent.com/…/StanfordDrupalCamp2018-… | sed -n '1!p' | terminus wp mcdwaynedotcom.test -- post create --post_author=1 --post_title='Stanford DrupalCamp: The first time I have ever seen it rain in Palo Alto and a shorter camp than usual' --post_name='StandfordDrupalCamp2018' --count=1 --post_status=publish -

5. upon success ping Circle to fire off behat tests to test something like URLs resolve (Form fill? Image load?)

https://www.jeffgeerling.com/…/testing-redirections-using-b… Going to need help on this part I think

6. If tests pass, deploy to live-sitename



GET THE CONTENT FROM DEV! 

https://dev-mcdwaynedotcom.pantheonsite.io/wp-json/wp/v2/posts/636
get the raw values


curl https://dev-mcdwaynedotcom.pantheonsite.io/wp-json/wp/v2/posts/636 
content.rendered
title.rendered

curl -X GET "https://dev-mcdwaynedotcom.pantheonsite.io/wp-json/wp/v2/posts/636" | jq '.[].content'


















I learned about WP-CLI by using it and explaining it and getting to teach it with Daniel Bachhuber
I started exploring how I could leverage it even more
lead to 
```
curl https://raw.githubusercontent.com/mcdwayne/PublicDocs/master/NotesITookAtCampsAndBlogDrafts/StanfordDrupalCamp2018-blog-draft.txt | sed -n '1!p' | terminus wp mcdwaynedotcom.gutes -- post create --post_author=1 --post_title='Stanford DrupalCamp: The first time I have ever seen it rain in Palo Alto and a shorter camp than usual' --post_name='StandfordDrupalCamp2018' --count=1 --post_status=publish -
```
I realized this had some serious issues and I needed a cleaner way to deal with this.
Goals:
	1. Avoid having to write my copy anywhere but local text editors (Sublime, Textwrangler, ect)
	2. Avoid monkeying around with drop down menus when I am formatting the post
	3. Need a way to insert testing as the thing evolves
	4. A way to share my work with others to learn from and maybe use themselves
		The orignal way of curl... was insanity to explain without making people read the WP-CLI 

